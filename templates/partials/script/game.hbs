	// GAME LOGIC
	var levelItems;

	$('.levels [data-level]').click(function(evt) {

		console.log($(this).data('level'));
		StartLevel($(this).data('level'));

	});

	var points = 0;

	$('#tinderslide').jTinder({
		onDislike: function (item) {
			if ($(item).hasClass('gone'))
				return
			else {
				$(item).addClass('gone');
		        CheckTrash(item);
			}
	    },
	    onLike: function (item) {
	    	if ($(item).hasClass('gone'))
				return
			else {
				$(item).addClass('gone');
		        CheckRecycle(item);
			}
	    },
	    animationRevertSpeed: 200,
	    animationSpeed: 400,
	    threshold: 1,
	    likeSelector: '#recycle',
	    dislikeSelector: '#trash'
	});

	// If a player chooses to trash an item
  $('#trash').click(function() {
  	$('#tinderslide').jTinder('dislike');
  });

  function CheckTrash(item) {
  	// check if item is trash
  	if (item.hasClass('Trash')) {
  		console.log('CORRECT - dis trash');
  		UpdateScore(1);
  	} else {
  		UpdateScore(-1);
  		console.log ('WRONG - dis recyclable');
  	}
  }

  // If a player chooses to recycle
  $('#recycle').click(function() {
  	$('#tinderslide').jTinder('like');
  });

  function CheckRecycle(item) {
  	// check if item is recyclable
  	if (item.hasClass('Recycle')) {
  		UpdateScore(1);
  		console.log('CORRECT - dis recyclable');

  	} else {
  		UpdateScore(-1);
  		console.log ('WRONG - dis trash');
  	}
  }

  // If a player chooses to compost
  $('#compost').click(function() {
  	var item = $('.level.ACTIVE .item').last();
  	$(item).animate({
  		'top': "-1000px"
  	}, 500, function(){
  		$(item).addClass('gone');
  		CheckCompost(item);
  		// Like it - this will do nothing
  		$('#tinderslide').jTinder('like');
  	});
  });

  function CheckCompost(item) {
  	// check if item is recyclable
  	if (item.hasClass('Compost')) {
  		UpdateScore(1);
  		console.log('CORRECT - dis compost');

  	} else {
  		UpdateScore(-1);
  		console.log ('WRONG - dis something ELSe');
  	}
  }

  function StartLevel(num) {
  	// Fade in the game, out the profile
  	$('.profile').fadeOut(function(){
  		$('.game').fadeIn();
  		// Fade in the level
		$('.game').find(".level[data-level=" + num + "]").fadeIn(function(){
			$('ACTIVE').removeClass('ACTIVE');
			$(this).addClass('ACTIVE');

		});
  	});

  }

  function UpdateScore(num) {
  	var end = false;
  	points = points + num;

  	// Check if this is the last card in the stack - end the level
	if ($('.level.ACTIVE .item:not(.gone)').length == 0){
		console.log('this is the end')
		end = true;
	}

  	if (end) {
  		var grade = points/$('.level.ACTIVE .item.gone').length;
	  	// Send player data
	  	var data = {};
			data.id = "{{playerId}}";
			data.score = points, 
			data.grade = grade,
			data.level = $('.level.ACTIVE').data('level');
			console.log(data);

	  	$.get("/api/update/", data, function(data){
	  		// Show that end-of-level modal
	  		$('.modal#level-over').fadeIn();
	  		// Update player score on this end
	  		$('#points-counter').html(data);
		})
		.fail(function(err) {
		    alert( "error" + err );
		});

	} else {
		// Update player score
		$('#points-counter').html(points);
	}

  }