	// GAME LOGIC
	var levelItems;
  var points = 0;

  function ShowMatch(item, match) {

    console.log(item);

    var modalId = $(item).find('.item-pane').attr('id');

    if (match) {
      $('.modal-wrap.match#' + modalId + ' .message').text('Its a Match!');

    } else {
      $('.modal-wrap.match#' + modalId + ' .message').text('Not Quite!');
    }
    $('.modal-group').show(function(){
      $('.modal-wrap.match#' + modalId).fadeIn().addClass('open');

    });
    
  }

  function CheckSpecial(item, special) {
    // check if item is recyclable
    if (item.hasClass(special)) {
      // if (item)
      console.log('CORRECT - dis special');
      UpdateScore(1);
      ShowMatch(item, true);
    } else {
      UpdateScore(-1);
      ShowMatch(item, false);
      console.log ('WRONG - dis something ELSe');
    }
  }

  function CheckTrash(item) {
    // check if item is trash
    if ($(item).hasClass('Trash')) {
      ShowMatch(item, true);
      console.log('CORRECT - dis trash');
      UpdateScore(1);
    } else {
      UpdateScore(-1);
      ShowMatch(item, false);
      console.log ('WRONG - dis recyclable');
    }
  }

  function CheckRecycle(item) {
    // check if item is recyclable
    if ($(item).hasClass('Recycle')) {
      UpdateScore(1);
      ShowMatch(item, true);
      console.log('CORRECT - dis recyclable');

    } else {
      UpdateScore(-1);
      ShowMatch(item, false);
      console.log ('WRONG - dis trash');
    }
  }

  function CheckCompost(item) {
    console.log(item);
    // check if item is recyclable
    if (item.hasClass('Compost')) {
      UpdateScore(1);
      ShowMatch(item, true);
      console.log('CORRECT - dis compost');

    } else {
      UpdateScore(-1);
      ShowMatch(item, false);
      console.log ('WRONG - dis something ELSe');
    }
  }

	$('.levels [data-level]').click(function(evt) {

		console.log($(this).data('level'));
		StartLevel($(this).data('level'));

	});

  $('.item').hammer().on("swipeleft", function(ev){

    if ($(this).hasClass('gone'))
      return;

    $(this).addClass('gone');
    CheckTrash(this);

    $(this).animate({
      left: '-1000px'
    }, 500);
  });

	// If a player chooses to trash an item
  $('#trash').on('click', function() {
    var item = $('.level.ACTIVE .item:not(.gone)').last();
    $(item).addClass('gone');
    CheckTrash(item);
  	$(item).animate({
      left: '-1000px'
    }, 500);
  });

  $('.item').hammer().on("swiperight", function(ev){
    if ($(this).hasClass('gone'))
      return;

    $(this).addClass('gone');
    CheckRecycle(this);
    $(this).animate({
      right: '-1000px'
    }, 500);
  });

  // If a player chooses to recycle
  $('#recycle').on('click', function() {
    var item = $('.level.ACTIVE .item:not(.gone)').last();

    $(item).addClass('gone');
    CheckRecycle(item);

  	$(item).animate({
      right: '-1000px'
    }, 500);

  });

  // If a player chooses to compost
  $('#compost').on('click', function() {
  	var item = $('.level.ACTIVE .item:not(.gone)').last();

    $(item).addClass('gone');
    CheckCompost(item);

  	$(item).animate({
  		'top': "-1000px"
  	}, 500);
  });

  // If a player chooses 'special'
  $('#special').click(function() {
    var item = $('.level.ACTIVE .item:not(.gone)').last();
    console.log(item, 'click');
    
    $('.modal.special').fadeIn(function() {
      $('.option').click(function(){

        CheckSpecial(item, $(this).attr('id'));
        $('.modal.special').fadeOut();
        $(item).addClass('gone');

        $(item).animate({
          'top': "-1000px"
        }, 500);

      })
    });
    
  });

  $('.item.open').on('click', function(e){
    event.preventDefault();
    event.stopPropagation();
    return;
  });

  $('.item:not(.open)').on('click', function(event){

    event.preventDefault();
    event.stopPropagation();

    $(this).css('z-index', '3000');

    $(this).animate({
      'height':'100%',
      'max-height':'100%',
      'bottom':'0px',
      'top':'-107px'
    }, 200);

    $(this).addClass('open');

    $(this).find('.item-bio').show();

    $(this).find('.btn-close').css('visibility', 'visible');

    $(this).find('.btn-close').on('click', function(event){

        event.preventDefault();
        event.stopPropagation();

        $(this).closest('.item.open').css('z-index', '1000');

        $(this).closest('.item.open').animate({
          'height':'100%',
          'bottom':'0px',
          'max-height': slideheight,
          'top':'0px'
        }, 200, function(){
          $(this).removeClass('open');
          $(this).find('.item-bio').hide();
          $(this).find('.btn-close').css('visibility', 'hidden');
        });

    });

  });

  $('#btn-profile').on('click', function(){
    var data = {};
    $.get("/api/leader/", data, function(data){
      console.log(data);
      $('.leaderboard').html(data);
      $('.profile').hide(function(){
        $('.leaderboard').fadeIn(function(){
          $('.ACTIVE').removeClass('ACTIVE');
          $(this).addClass('ACTIVE');
        });
      });
    // To do: alert user and ask if they are sure
  });

  $('#btn-leader').on('click', function(){
    var data = {};
    $.get("/api/leader/", data, function(data){
      console.log(data);
      $('.leaderboard').html(data);
      $('.profile').hide(function(){
        $('.leaderboard').fadeIn(function(){
          $('.ACTIVE').removeClass('ACTIVE');
          $(this).addClass('ACTIVE');
        });
      });

    })
    .fail(function() {
        alert( "error" );
    });
  });

  $('input#back-btn').click(function() {
    console.log("returngin")
    $('.modal-wrap.match.open').fadeOut().removeClass('open');
    $('.modal-group').hide();
  });

  function StartLevel(num) {
    // enable/disable buttons
    if (num == 2) {
      $('#compost').attr('disabled', false);
    } else if (num == 3) {
      $('#compost').attr('disabled', false);
      $('#special').attr('disabled', false);
    }

  	// Fade in the game, out the profile
  	$('.profile').fadeOut(function(){
  		$('.game').fadeIn();
  		// Fade in the level
  		$('.game').find(".level[data-level=" + num + "]").fadeIn(function(){
  			$('.ACTIVE').removeClass('ACTIVE');
  			$(this).addClass('ACTIVE');

  		});
  	});

  }

  function UpdateScore(num) {
  	var end = false;
  	points = points + num;

  	// Check if this is the last card in the stack - end the level
  	if ($('.level.ACTIVE .item:not(.gone)').length == 0){
  		console.log('this is the end')
  		end = true;
  	}

  	if (end == true) {
      // console.log($('.level.ACTIVE .item.gone').length);
  		var grade = points/$('.level.ACTIVE .item.gone').length;
	  	// Send player data
	  	var data = {};
			data.id = "{{playerId}}";
			data.score = points, 
			data.grade = grade,
			data.level = $('.level.ACTIVE').data('level');
			console.log(data);

	  	$.get("/api/update/", data, function(data){
	  		// Show that end-of-level modal
	  		$('.modal#level-over').fadeIn();
	  		// Update player score on this end
	  		$('#points-counter').html(data);
  		})
  		.fail(function(err) {
  		    alert( "error" + err );
  		});

  	} else {
  		// Update player score
  		$('#points-counter').html(points);
  	}

  }

