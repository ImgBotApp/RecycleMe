	// GAME LOGIC
	var levelItems;
  var points = 0;

  function CheckTrash(item) {
    // check if item is trash
    if ($(item).hasClass('Trash')) {
      ShowMatch(item, true);
      console.log('CORRECT - dis trash');
      UpdateScore(1);
    } else {
      UpdateScore(-1);
      ShowMatch(item, false);
      console.log ('WRONG - dis recyclable');
    }
  }

  function CheckRecycle(item) {
    // check if item is recyclable
    if ($(item).hasClass('Recycle')) {
      UpdateScore(1);
      ShowMatch(item, true);
      console.log('CORRECT - dis recyclable');

    } else {
      UpdateScore(-1);
      ShowMatch(item, false);
      console.log ('WRONG - dis trash');
    }
  }

  function CheckCompost(item) {
    console.log(item);
    // check if item is recyclable
    if (item.hasClass('Compost')) {
      UpdateScore(1);
      ShowMatch(item, true);
      console.log('CORRECT - dis compost');

    } else {
      UpdateScore(-1);
      ShowMatch(item, false);
      console.log ('WRONG - dis something ELSe');
    }
  }

	$('.levels [data-level]').click(function(evt) {

		console.log($(this).data('level'));
		StartLevel($(this).data('level'));

	});

  $('.item').hammer().on("swipeleft", function(ev){

    if ($(this).hasClass('gone'))
      return;

    $(this).animate({
      left: '-1000px'
    }, 1000, function(){
      $(this).addClass('gone');
      CheckTrash(this);
    });
  });

	// If a player chooses to trash an item
  $('#trash').on('click', function() {
    var item = $('.level.ACTIVE .item:not(.gone)').last();
  	$(item).animate({
      left: '-1000px'
    }, 1000, function(){
      $(item).addClass('gone');
      CheckTrash(item);
    });
  });

  $('.item').hammer().on("swiperight", function(ev){
    if ($(this).hasClass('gone'))
      return;

    $(this).animate({
      right: '-1000px'
    }, 1000, function(){
      $(this).addClass('gone');
      CheckRecycle(this);
    });
  });

  // If a player chooses to recycle
  $('#recycle').on('click', function() {
    var item = $('.level.ACTIVE .item:not(.gone)').last();
  	$(item).animate({
      right: '-1000px'
    }, 1000, function(){
      $(item).addClass('gone');
      CheckRecycle(item);
    });
  });

  $('.item').hammer().on("swipeup", function(ev){
    if ($(this).hasClass('gone'))
      return;

    $(this).animate({
      'top': '-1000px'
    }, 1000, function(){
      $(this).addClass('gone');
      CheckCompost(this);
    });
  });

  // If a player chooses to compost
  $('#compost').on('click', function() {
  	var item = $('.level.ACTIVE .item:not(.gone)').last();
  	$(item).animate({
  		'top': "-1000px"
  	}, 500, function(){
  		$(item).addClass('gone');
  		CheckCompost(item);
  	});
  });

  

  // $('.item').hammer().on("swipedown pandown", function(ev){
  //   var item = $('.level.ACTIVE .item:not(.gone)').last();
  //   $(item).animate({
  //     'top': '-1000px'
  //   }, 1000, function(){
  //     $(item).addClass('gone');
  //     CheckSpecial(item);
  //   });
  // });

  // If a player chooses 'special'
  $('#special').click(function() {

    $('.modal.special').fadeIn(function() {
      $('.option').click(function(){
        $(this).toggleClass('selected');
        CheckSpecial(item, $(this).text());
      })
    });
    // var item = $('.level.ACTIVE .item:not(.gone)').last();
    // $(item).animate({
    //   'top': "-1000px"
    // }, 500, function(){
    //   $(item).addClass('gone');
    //   CheckSpecial(item);
    // });
  });



  function CheckSpecial(item, special) {
    console.log(item);
    // check if item is recyclable
    if (item.hasClass('Special')) {
      if (item)
      console.log('CORRECT - dis special');
      UpdateScore(1);
      ShowMatch(item, true);
      

    } else {
      UpdateScore(-1);
      ShowMatch(item, false);
      console.log ('WRONG - dis something ELSe');
    }
  }

  function ShowMatch(item, match) {

    var modalId = $(item).find('.item-pane').attr('id');

    if (match) {
      $('.modal-wrap.match#' + modalId + ' .message').text('Its a Match!');

    } else {
      $('.modal-wrap.match#' + modalId + ' .message').text('Not Quite!');
    }

    $('.modal-wrap.match#' + modalId).fadeIn().addClass('open');

  }

  $('input#back-btn').click(function() {
    console.log("returngin")
    $('.modal-wrap.match.open').fadeOut().removeClass('open');
  });

  function StartLevel(num) {
  	// Fade in the game, out the profile
  	$('.profile').fadeOut(function(){
  		$('.game').fadeIn();
  		// Fade in the level
  		$('.game').find(".level[data-level=" + num + "]").fadeIn(function(){
  			$('ACTIVE').removeClass('ACTIVE');
  			$(this).addClass('ACTIVE');

  		});
  	});

  }

  function UpdateScore(num) {
  	var end = false;
  	points = points + num;

  	// Check if this is the last card in the stack - end the level
  	if ($('.level.ACTIVE .item:not(.gone)').length == 0){
  		console.log('this is the end')
  		end = true;
  	}

  	if (end) {
      console.log($('.level.ACTIVE .item.gone').length);
  		var grade = points/$('.level.ACTIVE .item.gone').length;
	  	// Send player data
	  	var data = {};
			data.id = "{{playerId}}";
			data.score = points, 
			data.grade = grade,
			data.level = $('.level.ACTIVE').data('level');
			console.log(data);

	  	$.get("/api/update/", data, function(data){
	  		// Show that end-of-level modal
	  		$('.modal#level-over').fadeIn();
	  		// Update player score on this end
	  		$('#points-counter').html(data);
  		})
  		.fail(function(err) {
  		    alert( "error" + err );
  		});

  	} else {
  		// Update player score
  		$('#points-counter').html(points);
  	}

  }